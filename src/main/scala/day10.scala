package day10

import scala.io.Source
import Main._

// ################################################################################################################################
// ################################################################################################################################
// ################################################################################################################################
// ################################################################################################################################

object GridHandle {

  // ========================================================================================================================
  // ========================================================================================================================

  val startableIndexChange:Tuple2[Int,Int] = (    0,    0)
  val nonMovingIndexChange:Tuple2[Int,Int] = (-8888,-8888)
  val exceptionIndexChange:Tuple2[Int,Int] = (-9999,-9999)

  // ========================================================================================================================
  // ========================================================================================================================

  val tileCharList = Array[Char](
    '.', 
    'S', 
    '|', 
    '-', 
    'L', 
    'J', 
    'F', 
    '7'
  )
  
  // ========================================================================================================================
  // ========================================================================================================================

  def tileCharDataList = Array[Tuple2[()=>Int,Tuple2[Int,Int]]](
  //*---/*#@@@@@#*/---/*------*/---/*#@@@@@#*/---*---------------------------*----/*#@@@@@#*/---*--------------------*---/*#@@@@@#*/---*--//------*
  //|   /*#@@@@@#*/   /*      */   /*#@@@@@#*/   |                           |    /*#@@@@@#*/   |                    |   /*#@@@@@#*/   |  //      |
  //|   /*#@@@@@#*/   /* char */   /*#@@@@@#*/   |    tile retrieving func   |    /*#@@@@@#*/   |  rowDiff   colDiff |   /*#@@@@@#*/   |  // DESC |
  //|   /*#@@@@@#*/   /*      */   /*#@@@@@#*/   |                           |    /*#@@@@@#*/   |                    |   /*#@@@@@#*/   |  //      |
  //*---/*#@@@@@#*/---/*------*/---/*#@@@@@#*/---*---------------------------*----/*#@@@@@#*/---*--------------------*---/*#@@@@@#*/---*--//------*
    (   /*#@@@@@#*/   /*  '.' */   /*#@@@@@#*/   ( () => { tileCharList(0) } ),   /*#@@@@@#*/    nonMovingIndexChange    /*#@@@@@#*/   ), // non  |
    (   /*#@@@@@#*/   /*  'S' */   /*#@@@@@#*/   ( () => { tileCharList(1) } ),   /*#@@@@@#*/    startableIndexChange    /*#@@@@@#*/   ), // ANY  |
    (   /*#@@@@@#*/   /*  '|' */   /*#@@@@@#*/   ( () => { tileCharList(2) } ),   /*#@@@@@#*/   (       +2,       0  )   /*#@@@@@#*/   ), // N-S  |
    (   /*#@@@@@#*/   /*  '-' */   /*#@@@@@#*/   ( () => { tileCharList(3) } ),   /*#@@@@@#*/   (        0,      +2  )   /*#@@@@@#*/   ), // E-W  |
    (   /*#@@@@@#*/   /*  'L' */   /*#@@@@@#*/   ( () => { tileCharList(4) } ),   /*#@@@@@#*/   (       -1,      +1  )   /*#@@@@@#*/   ), // N-E  |
    (   /*#@@@@@#*/   /*  'J' */   /*#@@@@@#*/   ( () => { tileCharList(5) } ),   /*#@@@@@#*/   (       -1,      -1  )   /*#@@@@@#*/   ), // N-W  |
    (   /*#@@@@@#*/   /*  'F' */   /*#@@@@@#*/   ( () => { tileCharList(6) } ),   /*#@@@@@#*/   (       +1,      +1  )   /*#@@@@@#*/   ), // S-E  |
    (   /*#@@@@@#*/   /*  '7' */   /*#@@@@@#*/   ( () => { tileCharList(7) } ),   /*#@@@@@#*/   (       +1,      -1  )   /*#@@@@@#*/   )  // S-W  |
  //*---/*#@@@@@#*/---/*------*/---/*#@@@@@#*/---*---------------------------*----/*#@@@@@#*/---*--------------------*---/*#@@@@@#*/---*--//------*
  //|   /*#@@@@@#*/   /*      */   /*#@@@@@#*/   |                           |    /*#@@@@@#*/   |                    |   /*#@@@@@#*/   |  //      |
  //*---/*#@@@@@#*/---/*------*/---/*#@@@@@#*/---*---------------------------*----/*#@@@@@#*/---*--------------------*---/*#@@@@@#*/---*--//------*
  )

  // ========================================================================================================================
  // ========================================================================================================================

  def gridIndexChangeByTile(tileChar:Char, includeDebuggingInfo:Boolean):Tuple2[Int,Int]={
    try{
      // try for grab where the tile char matches, and then send the index change tuple to user
      tileCharDataList.find(possibleTile=>{possibleTile._1()==tileChar}).get._2
    }
    catch {
      case e: Exception =>{
        if(includeDebuggingInfo) printf("!! gridIndexChangeByTile '%c' failed !!: %s ---- %s\n",tileChar,e.toString(),e.getMessage())
        exceptionIndexChange
      }
    }
  }

  // ========================================================================================================================
  // ========================================================================================================================

  // def printOutCharGrid(charGrid:Array[Array[Char]]):Unit={
  //   print("GRID CHARS:\n|")
  //   for(colIdx <- 0 to charGrid(0).length-1){ printf("%2d |",colIdx) }
  //   print("\n+")
  //   for(colIdx <- 0 to charGrid(0).length-1){ print("---+") }
    
  //   print("\n|")
  //   // every row in the grid
  //   for(gridRow <- charGrid){
  //     // every col in the row
  //     for(charCell <- gridRow){
  //       printf(" %c |",charCell)
  //     }
  //   }
  //   print("\n+")
  //   for(colIdx <- 0 to charGrid(0).length-1){ print("---+") }
  // }

    // var charGrid = inputLines.map(
    //   // given line, get all the chars
    //   (currInputLine) => {
    //     singleCharPattern.findAllIn(currInputLine).toArray.map(str=>{str.charAt(0)})
    //   }
    // ).toArray

  // ========================================================================================================================
  // ========================================================================================================================

  def getCharGrid(inputLines:List[String]):Array[Array[Char]]={
    inputLines.map(
      (currLine)=>{
        currLine.toCharArray()
      }
    ).toArray
  }

  // ========================================================================================================================
  // ========================================================================================================================

  def printOutCharGrid(charGrid:Array[Array[Char]]):Unit={
    print("GRID CHARS:\n|")
    for(colIdx <- 0 to charGrid(0).length-1){ printf("%2d |",colIdx) }
    print("\n+")
    for(colIdx <- 0 to charGrid(0).length-1){ print("---+") }
    
    // every row in the grid
    charGrid.map((gridRow)=>{
      print("\n|")
      // every col in the row
      gridRow.map((charCell)=>{
        printf(" %c |",(
          if('.'==charCell) ' ' else charCell
        ))
      })
      print("\n+")
      gridRow.map((_)=>{print("---+")})
    })
    println()
  }

  // ========================================================================================================================
  // ========================================================================================================================

  // ...

  // ========================================================================================================================
  // ========================================================================================================================

  // ...

  // ========================================================================================================================
  // ========================================================================================================================

  // ...

  // ========================================================================================================================
  // ========================================================================================================================

}

// ################################################################################################################################
// ################################################################################################################################
// ################################################################################################################################
// ################################################################################################################################

object Day10 {

  // ========================================================================================================================
  // ========================================================================================================================

  /**
    * inlet for the code
    *
    * @param partNumber given as Int from caller
    */
  def handleDay(partNumber:Int):Unit={
    try{
      partNumber match {
        // testing addition
        case 98 => {
          // ============================================================
          // ...
          handlePart1(Main.grabLinesFromFile("data/day10testinput2.txt"),true)
          // ...
          // ============================================================
        }
        case 99 => {
          // ============================================================
          // ...
          handlePart2(Main.grabLinesFromFile("data/day10testinput1.txt"),true)
          // ...
          // ============================================================
        }
        // the part matching
        case 1 => {
          // ============================================================
          handlePart1(Main.grabLinesFromFile("data/day10input.txt"),false)
          // ============================================================
        }
        case 2 => {
          // ============================================================
          handlePart2(Main.grabLinesFromFile("data/day10input.txt"),false)
          // ============================================================
        }
        case numberInput => {
          // ============================================================
          Main.failingMessage("DAY 10 INVALID PART NUMBER: "+numberInput)
          // ============================================================
        }
      }
    }
    catch {
      case e:Exception=> Main.failingMessage("DAY 10 HAD EXCEPTION: "+e.toString())
    }
  }

  // ========================================================================================================================
  // ========================================================================================================================

  def handlePart1(inputLines:List[String],includeDebuggingInfo:Boolean):Unit={
    // TODO: DAY 10 PART 1

    // break into 2d char array
    // --------------------------------------------------------------------------------------------
    
    // regex for grabbing any single character
    val singleCharPattern = ".".r

    var charGrid = inputLines.map(
      // given line, get all the chars
      (currInputLine) => {
        singleCharPattern.findAllIn(currInputLine).toArray.map(str=>{str.charAt(0)})
      }
    ).toArray

    GridHandle.printOutCharGrid(charGrid)
    

    // ...
    // --------------------------------------------------------------------------------------------
    
    // ...

    // ...
    // --------------------------------------------------------------------------------------------
    
    // ...

    // --------------------------------------------------------------------------------------------
    println("THIS PART IS UNFINISHED")
  }

  // ========================================================================================================================
  // ========================================================================================================================

  def handlePart2(inputLines:List[String],includeDebuggingInfo:Boolean):Unit={
    // TODO: DAY 10 PART 2
    println("THIS PART IS UNFINISHED")
  }

  // ========================================================================================================================
  // ========================================================================================================================
  
}

// ################################################################################################################################
// ################################################################################################################################
// ################################################################################################################################
// ################################################################################################################################
